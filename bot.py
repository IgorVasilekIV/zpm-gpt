__version__ = "2.7.1"

import sys
import subprocess
import os

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---
def install_missing_packages():
    req_file = "requirements.txt"
    if not os.path.exists(req_file):
        print("[ERROR] requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
        exit(0)

    with open(req_file, "r", encoding="utf-8") as f:
        requirements = [line.strip() for line in f if line.strip() and not line.startswith("#")]

    for package in requirements:
        pkg_name = package.split("==")[0] if "==" in package else package
        try:
            __import__(pkg_name if pkg_name != "telebot" else "telebot")
        except ModuleNotFoundError:
            print(f"[INFO] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {package} ...")
            try:
                subprocess.check_call(
                    [sys.executable, "-m", "pip", "install", package],
                    stdout=subprocess.DEVNULL,
                    stderr=sys.stderr
                )
            except Exception as install_err:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}: {install_err}")

install_missing_packages()

# --- –ò–º–ø–æ—Ä—Ç—ã ---
import telebot
import speech_recognition as sr
from pydub import AudioSegment
from PIL import Image
import pytesseract
from google import genai
from dotenv import load_dotenv
import threading
import time
import html


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")
client = genai.Client(api_key=GEMINI_API_KEY)

# --- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ---
SYSTEM_PROMPT = ("–¢—ã ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram "
                "–∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–∞—ë—Ç—Å—è –ª—é–±—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤ —Å–≤–æ—ë–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏. "
                 "–ò—Å–ø–æ–ª—å–∑—É–π HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: "
                 "<b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–∫–æ–¥</code>, "
                 "<a href=\"https://example.com\">—Å—Å—ã–ª–∫–∏</a> "
                 "<tg-spoiler>—Å–ø–æ–π–ª–µ—Ä</tg-spoiler> "
                 "<blockquote>—Ü–∏—Ç–∞—Ç–∞</blockquote> "
                 "<blockquote expandable>—Å–≤—ë—Ä–Ω—É—Ç–∞—è —Ü–∏—Ç–∞—Ç–∞</blockquote>. "
                 
)


# --- –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
CUSTOM_PROMPT = (new_prompt := os.getenv("CUSTOM_PROMPT")) if os.getenv("CUSTOM_PROMPT") else None

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ ---
import json

PROMPTS_FILE = "prompts.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if os.path.exists(PROMPTS_FILE):
    with open(PROMPTS_FILE, "r", encoding="utf-8") as f:
        user_prompts = json.load(f)
else:
    user_prompts = {}

def save_prompts():
    with open(PROMPTS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_prompts, f, ensure_ascii=False, indent=2)

# --- –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —é–∑–µ—Ä–∞–º ---
@bot.message_handler(commands=["setprompt"])
def set_prompt(message):
    args = message.text.split(" ", 1)
    if len(args) < 2 or not args[1].strip():
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.\n\n"
            "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n<code>/setprompt –¢—ã ‚Äî –≤–µ—Å—ë–ª—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ –º–µ–º–æ–≤</code>",
        )
        return

    new_prompt = args[1].strip()
    user_prompts[str(message.chat.id)] = new_prompt  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ chat.id
    save_prompts()

    bot.send_message(
        message.chat.id,
        f"‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n<code>{html.escape(new_prompt)}</code>",
        parse_mode="HTML"
    )


@bot.message_handler(commands=["clearprompt"])
def clear_prompt(message):
    if str(message.chat.id) in user_prompts:
        del user_prompts[str(message.chat.id)]
        save_prompts()
        bot.send_message(
            message.chat.id,
            "‚úÖ –í–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É–¥–∞–ª—ë–Ω. –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç."
        )
    else:
        bot.send_message(
            message.chat.id,
            "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç."
        )

@bot.message_handler(commands=["start", "help"])
def send_welcome(message):
    user_prompt = user_prompts.get(str(message.chat.id))
    raw_prompt = html.escape(user_prompt) if user_prompt else "<i>(–Ω–µ –∑–∞–¥–∞–Ω)</i>"

    bot.send_message(
        message.chat.id,
        (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Google Gemini –¥–ª—è –æ–±—â–µ–Ω–∏—è.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≤–∏–¥–µ–æ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!\n\n"
            "–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:\n<blockquote expandable><code>{}</code></blockquote>\n\n"
            "           <b>--- –í–µ—Ä—Å–∏—è: <code>{}</code> ---</b>"
        ).format(raw_prompt, __version__),
        parse_mode="HTML"
    )

# --- –û–±—â–µ–Ω–∏–µ —Å Gemini ---
def chat_with_gemini(user_id, text):
    # –±–µ—Ä–µ–º –ø—Ä–æ–º–ø—Ç —é–∑–µ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    user_prompt = user_prompts.get(str(user_id))
    prompt_to_use = SYSTEM_PROMPT.strip()
    if user_prompt:
        prompt_to_use += "\n\n" + user_prompt.strip()

    final_text = f"{prompt_to_use}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {text}"

    try:
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=[{"role": "user", "parts": [{"text": final_text}]}]
        )
        return response.text
    except Exception as e:
        return f"(–û—à–∏–±–∫–∞ Gemini: {e})"


# --- –î–µ–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
def send_long_message(chat_id, text):
    max_len = 4000
    if len(text) > max_len:
        for i in range(0, len(text), max_len):
            bot.send_message(chat_id, text[i:i+max_len])
    else:
        bot.send_message(chat_id, text)


# --- –•–µ–ª–ø–µ—Ä –¥–ª—è "–ø–µ—á–∞—Ç–∞–µ—Ç..." ---
def send_typing(chat_id, stop_event):
    while not stop_event.is_set():
        bot.send_chat_action(chat_id, "typing")
        time.sleep(4)  # Telegram —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫

def with_typing(func):
    def wrapper(message):
        stop_event = threading.Event()
        typing_thread = threading.Thread(target=send_typing, args=(message.chat.id, stop_event))
        typing_thread.start()
        try:
            return func(message)
        finally:
            stop_event.set()
    return wrapper


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ---
@bot.message_handler(content_types=["text"])
@with_typing
def handle_text(message):
    reply = chat_with_gemini(message.chat.id, message.text)
    send_long_message(message.chat.id, reply)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö ---
@bot.message_handler(content_types=["voice"])
@with_typing
def handle_voice(message):
    file_info = bot.get_file(message.voice.file_id)
    file = bot.download_file(file_info.file_path)
    path = "voice.ogg"
    with open(path, "wb") as f:
        f.write(file)

    # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ogg -> wav
    sound = AudioSegment.from_file(path, format="ogg")
    sound.export("voice.wav", format="wav")

    recognizer = sr.Recognizer()
    with sr.AudioFile("voice.wav") as source:
        audio_data = recognizer.record(source)
        try:
            text = recognizer.recognize_google(audio_data, language="ru-RU")
            reply = chat_with_gemini(message.chat.id, text)
            send_long_message(message.chat.id, f"üé§ –¢—ã —Å–∫–∞–∑–∞–ª: <i>{text}</i>\n\n{reply}")
        except sr.UnknownValueError:
            bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω—è–ª —Ä–µ—á—å üòÖ")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ---
@bot.message_handler(content_types=["photo"])
@with_typing
def handle_photo(message):
    file_info = bot.get_file(message.photo[-1].file_id)
    file = bot.download_file(file_info.file_path)
    path = "image.jpg"
    with open(path, "wb") as f:
        f.write(file)

    text = pytesseract.image_to_string(Image.open(path), lang="rus+eng")
    if text.strip():
        reply = chat_with_gemini(message.chat.id, f"–¢–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏:\n{text}")
        send_long_message(message.chat.id, reply)
    else:
        bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ü§∑")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ ---
@bot.message_handler(content_types=["video"])
@with_typing
def handle_video(message):
    bot.send_message(message.chat.id, "üìπ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ! –ù–æ —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å.")


# --- –°—Ç–∞—Ä—Ç ---
if __name__ == "__main__":
    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
    if KeyboardInterrupt:
        print("\n[INFO] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")