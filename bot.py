__version__ = "2.3.2"

import sys
import subprocess
import os

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---
def install_missing_packages():
    req_file = "requirements.txt"
    if not os.path.exists(req_file):
        print("[WARN] requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return

    with open(req_file, "r", encoding="utf-8") as f:
        requirements = [line.strip() for line in f if line.strip() and not line.startswith("#")]

    for package in requirements:
        pkg_name = package.split("==")[0] if "==" in package else package
        try:
            __import__(pkg_name if pkg_name != "telebot" else "telebot")
        except ModuleNotFoundError:
            print(f"[INFO] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {package} ...")
            try:
                subprocess.check_call(
                    [sys.executable, "-m", "pip", "install", package],
                    stdout=subprocess.DEVNULL,
                    stderr=sys.stderr
                )
            except Exception as install_err:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}: {install_err}")

install_missing_packages()


# --- –ò–º–ø–æ—Ä—Ç—ã ---
import telebot
import speech_recognition as sr
from pydub import AudioSegment
from PIL import Image
import pytesseract
from google import genai
from dotenv import load_dotenv


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")  # HTML –∫–∞–∫ –≤ Hikka
client = genai.Client(api_key=GEMINI_API_KEY)


# --- –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ---
CUSTOM_PROMPT = """–¢—ã ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:
<b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–∫–æ–¥</code>, <a href="https://example.com">—Å—Å—ã–ª–∫–∏</a> <tg-spoiler>—Å–ø–æ–π–ª–µ—Ä</tg-spoiler> <blockquote>—Ü–∏—Ç–∞—Ç–∞</blockquote> <blockquote expandable>—Å–≤—ë—Ä–Ω—É—Ç–∞—è —Ü–∏—Ç–∞—Ç–∞</blockquote>.
"""


# --- –û–±—â–µ–Ω–∏–µ —Å Gemini ---
def chat_with_gemini(user_id, text):
    try:
        response = client.models.generate_content(
            model="gemini-1.5-flash",
            contents=[
                {"role": "system", "parts": [{"text": CUSTOM_PROMPT}]},
                {"role": "user", "parts": [{"text": text}]}
            ]
        )
        return response.text
    except Exception as e:
        return f"(–û—à–∏–±–∫–∞ Gemini: {e})"


# --- –î–µ–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
def send_long_message(chat_id, text):
    max_len = 4000
    if len(text) > max_len:
        for i in range(0, len(text), max_len):
            bot.send_message(chat_id, text[i:i+max_len])
    else:
        bot.send_message(chat_id, text)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ---
@bot.message_handler(content_types=["text"])
def handle_text(message):
    reply = chat_with_gemini(message.chat.id, message.text)
    send_long_message(message.chat.id, reply)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö ---
@bot.message_handler(content_types=["voice"])
def handle_voice(message):
    file_info = bot.get_file(message.voice.file_id)
    file = bot.download_file(file_info.file_path)
    path = "voice.ogg"
    with open(path, "wb") as f:
        f.write(file)

    # –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ogg -> wav
    sound = AudioSegment.from_file(path, format="ogg")
    sound.export("voice.wav", format="wav")

    recognizer = sr.Recognizer()
    with sr.AudioFile("voice.wav") as source:
        audio_data = recognizer.record(source)
        try:
            text = recognizer.recognize_google(audio_data, language="ru-RU")
            reply = chat_with_gemini(message.chat.id, text)
            send_long_message(message.chat.id, f"üé§ –¢—ã —Å–∫–∞–∑–∞–ª: <i>{text}</i>\n\n{reply}")
        except sr.UnknownValueError:
            bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω—è–ª —Ä–µ—á—å üòÖ")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ---
@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    file_info = bot.get_file(message.photo[-1].file_id)
    file = bot.download_file(file_info.file_path)
    path = "image.jpg"
    with open(path, "wb") as f:
        f.write(file)

    text = pytesseract.image_to_string(Image.open(path), lang="rus+eng")
    if text.strip():
        reply = chat_with_gemini(message.chat.id, f"–¢–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏:\n{text}")
        send_long_message(message.chat.id, reply)
    else:
        bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ü§∑")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ ---
@bot.message_handler(content_types=["video"])
def handle_video(message):
    bot.send_message(message.chat.id, "üìπ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ! –ù–æ —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å.")


# --- –°—Ç–∞—Ä—Ç ---
if __name__ == "__main__":
    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
